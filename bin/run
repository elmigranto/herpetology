#!/usr/bin/env bash
set -o errexit \
    -o pipefail \
    -o nounset \
    -o noglob

argc=$# && readonly argc
argv=("${@:1}") && readonly argv
cwd=$(pwd -P) && readonly cwd
__basename=$(basename "$0") && readonly __basename

function main {
  ensure_cwd_is_project_root
  eval "$(figure_out_what_to_run)"
} && readonly -f main

function figure_out_what_to_run {
  local to_execute && to_execute="pipenv run $(what_is_a_command_to_run)"

  if should_restart_on_changes; then
    to_execute="nodemon --watch src/ --ext py --exec '$to_execute'"
  fi

  print "$to_execute"
} && readonly -f figure_out_what_to_run

function what_is_a_command_to_run {
  if test $argc = 0; then
    print "python src/main.py"
  elif test $argc = 1; then
    case "${argv[0]}" in
      lint )
        print "mypy --strict --sqlite-cache '$cwd/src/'"
        ;;

      test )
        print "python -m unittest discover --start-directory '$cwd/src/' --pattern '*_test.py'"
        ;;

      * )
        print "${argv[0]}"
    esac
  else
    print "${argv[*]}"
  fi
} && readonly -f what_is_a_command_to_run

function should_restart_on_changes {
  test "$__basename" == 'runw'
} && readonly -f should_restart_on_changes

function ensure_cwd_is_project_root {
  local expected && expected=$(pipenv --where) && local -r expected
  local -r actual="$cwd"

  if test "$actual" != "$expected"; then
    fail "Expected CWD to be Project's root:

  Expected: $expected
    Actual: $actual
"
  fi
} && readonly -f ensure_cwd_is_project_root

function print { echo -e "$*";} && readonly -f print
function printerr { print "$@" > /dev/stderr;} && readonly -f printerr
function fail { printerr "$@" && exit 1; } && readonly -f fail

main
exit 0
